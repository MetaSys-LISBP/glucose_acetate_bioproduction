for (k in seq(n_step*0.8+1)){
# create empty matrix to store simulation results for a given glycolytic activity (k)
res_ace_range <- matrix(NA, nrow=n_step, ncol=2, dimnames=list(r=NULL, c=c("ace_concentration", "productivity")))
# update Vmax_glycolysis
setParameters(key="(glc_upt).V", value = glc_vmax[k])
applyInitialState()
# for each acetate concentration
for (j in seq(n_step)){
# update acetate concentration
setSpecies(key="Ace_out", initial_concentration=ace_concentration[j])
applyInitialState()
# calculate steady-state fluxes
#res_ss <- runSteadyState()
res_ss <- runTimeCourse()
tmp <- res_ss$result[,"Values[final_productivity]"]
productivity <- tmp[tmp != 0][1]
# save steady-state fluxes for glycolytic activity k & acetate concentration j
res_ace_range[j,] <- c(ace_concentration[j], productivity)
}
# save steady-state fluxes for all acetate concentrations at glycolytic activity k
simulation_results_dyn[k,,] <- res_ace_range
}
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 10,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2)})
loadModel("model/Gosselin2024_Ecoli_ace_bioproduction_dynamic_test.cps")
# create empty matrix to store simulation results
simulation_results_dyn <- array(NA, dim=c(n_step*0.8+1, n_step, 2), dimnames=list(inhibition=NULL, ace_concentration=NULL, specie=c("ace_concentration", "productivity")))
# run simulations
# for each glycolytic activity
for (k in seq(n_step*0.8+1)){
# create empty matrix to store simulation results for a given glycolytic activity (k)
res_ace_range <- matrix(NA, nrow=n_step, ncol=2, dimnames=list(r=NULL, c=c("ace_concentration", "productivity")))
# update Vmax_glycolysis
setParameters(key="(glc_upt).V", value = glc_vmax[k])
applyInitialState()
# for each acetate concentration
for (j in seq(n_step)){
# update acetate concentration
setSpecies(key="Ace_out", initial_concentration=ace_concentration[j])
applyInitialState()
# calculate steady-state fluxes
#res_ss <- runSteadyState()
res_ss <- runTimeCourse()
tmp <- res_ss$result[,"Values[final_productivity]"]
productivity <- tmp[tmp != 0][1]
# save steady-state fluxes for glycolytic activity k & acetate concentration j
res_ace_range[j,] <- c(ace_concentration[j], productivity)
}
# save steady-state fluxes for all acetate concentrations at glycolytic activity k
simulation_results_dyn[k,,] <- res_ace_range
}
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 10,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2)})
cols = colorRampPalette(c('royalblue4','lightblue'))
color.palette = function(n) hcl.colors(n, "YlOrRd", rev = TRUE)
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results[,,4]), nlevels = 10,
col = c(cols(5), color.palette(4)),
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2)})
cols = colorRampPalette(c('royalblue4','lightblue'))
color.palette = function(n) hcl.colors(n, "YlOrRd", rev = TRUE)
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results[,,4]), nlevels = 10,
col = c(cols(6), color.palette(4)),
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2)})
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results[,,2]), nlevels = 10,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2)})
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 20,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2)})
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 15,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2)})
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 20,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2)})
contour(t(simulation_results_dyn[,,2]), levels = 1, drawlabels = FALSE, axes = FALSE, frame.plot = FFALSE, add = TRUE)
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 20,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2)})
contour(t(simulation_results_dyn[,,2]), levels = 1, drawlabels = FALSE, axes = FALSE, frame.plot = FALSE, add = TRUE)
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 10,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2)})
contour(t(simulation_results_dyn[,,2]), levels = 1, drawlabels = FALSE, axes = FALSE, frame.plot = FALSE, add = TRUE)
loadModel("model/Gosselin2024_Ecoli_ace_bioproduction_dynamic_test.cps")
# create empty matrix to store simulation results
simulation_results_dyn <- array(NA, dim=c(n_step*0.8+1, n_step, 2), dimnames=list(inhibition=NULL, ace_concentration=NULL, specie=c("ace_concentration", "productivity")))
# run simulations
# for each glycolytic activity
for (k in seq(n_step*0.8+1)){
# create empty matrix to store simulation results for a given glycolytic activity (k)
res_ace_range <- matrix(NA, nrow=n_step, ncol=2, dimnames=list(r=NULL, c=c("ace_concentration", "productivity")))
# update Vmax_glycolysis
setParameters(key="(glc_upt).V", value = glc_vmax[k])
applyInitialState()
# for each acetate concentration
for (j in seq(n_step)){
# update acetate concentration
setSpecies(key="Ace_out", initial_concentration=ace_concentration[j])
applyInitialState()
# calculate steady-state fluxes
#res_ss <- runSteadyState()
res_ss <- runTimeCourse()
tmp <- res_ss$result[,"Values[final_productivity]"]
productivity <- tmp[tmp != 0][1]
# save steady-state fluxes for glycolytic activity k & acetate concentration j
res_ace_range[j,] <- c(ace_concentration[j], productivity)
}
# save steady-state fluxes for all acetate concentrations at glycolytic activity k
simulation_results_dyn[k,,] <- res_ace_range
}
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 10,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2)})
contour(t(simulation_results_dyn[,,2]), levels = 1, drawlabels = FALSE, axes = FALSE, frame.plot = FALSE, add = TRUE)
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 20,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2)})
contour(t(simulation_results_dyn[,,2]), levels = 1, drawlabels = FALSE, axes = FALSE, frame.plot = FALSE, add = TRUE)
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 10,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2)})
contour(t(simulation_results_dyn[,,2]), levels = 1, drawlabels = FALSE, axes = FALSE, frame.plot = FALSE, add = TRUE)
loadModel("model/Gosselin2024_Ecoli_ace_bioproduction_dynamic_test.cps")
# create empty matrix to store simulation results
simulation_results_dyn <- array(NA, dim=c(n_step*0.8+1, n_step, 2), dimnames=list(inhibition=NULL, ace_concentration=NULL, specie=c("ace_concentration", "productivity")))
# run simulations
# for each glycolytic activity
for (k in seq(n_step*0.8+1)){
# create empty matrix to store simulation results for a given glycolytic activity (k)
res_ace_range <- matrix(NA, nrow=n_step, ncol=2, dimnames=list(r=NULL, c=c("ace_concentration", "productivity")))
# update Vmax_glycolysis
setParameters(key="(glc_upt).V", value = glc_vmax[k])
applyInitialState()
# for each acetate concentration
for (j in seq(n_step)){
# update acetate concentration
setSpecies(key="Ace_out", initial_concentration=ace_concentration[j])
applyInitialState()
# calculate steady-state fluxes
#res_ss <- runSteadyState()
res_ss <- runTimeCourse()
tmp <- res_ss$result[,"Values[final_productivity]"]
productivity <- tmp[tmp != 0][1]
# save steady-state fluxes for glycolytic activity k & acetate concentration j
res_ace_range[j,] <- c(ace_concentration[j], productivity)
}
# save steady-state fluxes for all acetate concentrations at glycolytic activity k
simulation_results_dyn[k,,] <- res_ace_range
}
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 10,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2)})
contour(t(simulation_results_dyn[,,2]), levels = 1, drawlabels = FALSE, axes = FALSE, frame.plot = FALSE, add = TRUE)
loadModel("model/Gosselin2024_Ecoli_ace_bioproduction_dynamic_test.cps")
# create empty matrix to store simulation results
simulation_results_dyn <- array(NA, dim=c(n_step*0.8+1, n_step, 2), dimnames=list(inhibition=NULL, ace_concentration=NULL, specie=c("ace_concentration", "productivity")))
# run simulations
# for each glycolytic activity
for (k in seq(n_step*0.8+1)){
# create empty matrix to store simulation results for a given glycolytic activity (k)
res_ace_range <- matrix(NA, nrow=n_step, ncol=2, dimnames=list(r=NULL, c=c("ace_concentration", "productivity")))
# update Vmax_glycolysis
setParameters(key="(glc_upt).V", value = glc_vmax[k])
applyInitialState()
# for each acetate concentration
for (j in seq(n_step)){
# update acetate concentration
setSpecies(key="Ace_out", initial_concentration=ace_concentration[j])
applyInitialState()
# calculate steady-state fluxes
#res_ss <- runSteadyState()
res_ss <- runTimeCourse()
tmp <- res_ss$result[,"Values[final_productivity]"]
productivity <- tmp[tmp != 0][1]
# save steady-state fluxes for glycolytic activity k & acetate concentration j
res_ace_range[j,] <- c(ace_concentration[j], productivity)
}
# save steady-state fluxes for all acetate concentrations at glycolytic activity k
simulation_results_dyn[k,,] <- res_ace_range
}
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 10,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2)})
contour(t(simulation_results_dyn[,,2]), levels = 1, drawlabels = FALSE, axes = FALSE, frame.plot = FALSE, add = TRUE)
loadModel("model/Gosselin2024_Ecoli_ace_bioproduction_dynamic_test.cps")
#   number of steps
n_step <- 50
#   acetate concentration (between 0.1 and 100 mM)
ace_concentration <- 10**seq(0, 2, length.out = n_step)
#   glycolytic activity (between 20 and 100 % of initial Vmax)
glc_vmax <- getParameters(key="(glc_upt).V")$value*seq(0.2*n_step, n_step)/n_step
# create empty matrix to store simulation results
simulation_results_dyn <- array(NA, dim=c(n_step*0.8+1, n_step, 2), dimnames=list(inhibition=NULL, ace_concentration=NULL, specie=c("ace_concentration", "productivity")))
# run simulations
# for each glycolytic activity
for (k in seq(n_step*0.8+1)){
# create empty matrix to store simulation results for a given glycolytic activity (k)
res_ace_range <- matrix(NA, nrow=n_step, ncol=2, dimnames=list(r=NULL, c=c("ace_concentration", "productivity")))
# update Vmax_glycolysis
setParameters(key="(glc_upt).V", value = glc_vmax[k])
applyInitialState()
# for each acetate concentration
for (j in seq(n_step)){
# update acetate concentration
setSpecies(key="Ace_out", initial_concentration=ace_concentration[j])
applyInitialState()
# calculate steady-state fluxes
#res_ss <- runSteadyState()
res_ss <- runTimeCourse()
tmp <- res_ss$result[,"Values[final_productivity]"]
productivity <- tmp[tmp != 0][1]
# save steady-state fluxes for glycolytic activity k & acetate concentration j
res_ace_range[j,] <- c(ace_concentration[j], productivity)
}
# save steady-state fluxes for all acetate concentrations at glycolytic activity k
simulation_results_dyn[k,,] <- res_ace_range
}
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 10,
plot.axes = { axis(1, at=c(0, 1, 2), label=c(1, 10, 100));
axis(2)})
contour(t(simulation_results_dyn[,,2]), levels = 1, drawlabels = FALSE, axes = FALSE, frame.plot = FALSE, add = TRUE)
#   number of steps
n_step <- 50
#   acetate concentration (between 0.1 and 100 mM)
ace_concentration <- 10**seq(-1, 2, length.out = n_step)
#   glycolytic activity (between 20 and 100 % of initial Vmax)
glc_vmax <- getParameters(key="(glc_upt).V")$value*seq(0.2*n_step, n_step)/n_step
# create empty matrix to store simulation results
simulation_results_dyn <- array(NA, dim=c(n_step*0.8+1, n_step, 2), dimnames=list(inhibition=NULL, ace_concentration=NULL, specie=c("ace_concentration", "productivity")))
# run simulations
# for each glycolytic activity
for (k in seq(n_step*0.8+1)){
# create empty matrix to store simulation results for a given glycolytic activity (k)
res_ace_range <- matrix(NA, nrow=n_step, ncol=2, dimnames=list(r=NULL, c=c("ace_concentration", "productivity")))
# update Vmax_glycolysis
setParameters(key="(glc_upt).V", value = glc_vmax[k])
applyInitialState()
# for each acetate concentration
for (j in seq(n_step)){
# update acetate concentration
setSpecies(key="Ace_out", initial_concentration=ace_concentration[j])
applyInitialState()
# calculate steady-state fluxes
#res_ss <- runSteadyState()
res_ss <- runTimeCourse()
tmp <- res_ss$result[,"Values[final_productivity]"]
productivity <- tmp[tmp != 0][1]
# save steady-state fluxes for glycolytic activity k & acetate concentration j
res_ace_range[j,] <- c(ace_concentration[j], productivity)
}
# save steady-state fluxes for all acetate concentrations at glycolytic activity k
simulation_results_dyn[k,,] <- res_ace_range
}
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 10,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2)})
contour(t(simulation_results_dyn[,,2]), levels = 1, drawlabels = FALSE, axes = FALSE, frame.plot = FALSE, add = TRUE)
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 20,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2)})
contour(t(simulation_results_dyn[,,2]), levels = 1, drawlabels = FALSE, axes = FALSE, frame.plot = FALSE, add = TRUE)
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 20,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2); contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), add = TRUE, lwd = 2)})
?contour
axis(2); contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), add = TRUE, lwd = 2, nlevels=20})
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 20,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2); contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 20, add = TRUE, lwd = 2)})
contour(t(simulation_results_dyn[,,2]), levels = 1, drawlabels = FALSE, axes = FALSE, frame.plot = FALSE, add = TRUE)
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 10,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2); contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 20, add = TRUE, lwd = 2)})
contour(t(simulation_results_dyn[,,2]), levels = 1, drawlabels = FALSE, axes = FALSE, frame.plot = FALSE, add = TRUE)
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 20,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2); contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 20, add = TRUE, lwd = 2)})
contour(t(simulation_results_dyn[,,2]), levels = 1, drawlabels = FALSE, axes = FALSE, frame.plot = FALSE, add = TRUE)
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 10,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2); contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 10, add = TRUE, lwd = 2)})
contour(t(simulation_results_dyn[,,2]), levels = 1, drawlabels = FALSE, axes = FALSE, frame.plot = FALSE, add = TRUE)
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 10,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2)}) #; contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 10, add = TRUE, lwd = 2)})
contour(t(simulation_results_dyn[,,2]), levels = 1, drawlabels = FALSE, axes = FALSE, frame.plot = FALSE, add = TRUE)
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 14,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2)}) #; contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 10, add = TRUE, lwd = 2)})
contour(t(simulation_results_dyn[,,2]), levels = 1, drawlabels = FALSE, axes = FALSE, frame.plot = FALSE, add = TRUE)
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 16,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2)}) #; contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 10, add = TRUE, lwd = 2)})
contour(t(simulation_results_dyn[,,2]), levels = 1, drawlabels = FALSE, axes = FALSE, frame.plot = FALSE, add = TRUE)
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 20,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2)}) #; contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 10, add = TRUE, lwd = 2)})
contour(t(simulation_results_dyn[,,2]), levels = 1, drawlabels = FALSE, axes = FALSE, frame.plot = FALSE, add = TRUE)
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 20,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2)}) #; contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 10, add = TRUE, lwd = 2)})
contour(t(simulation_results_dyn[,,2]), levels = 1, drawlabels = FALSE, axes = FALSE, frame.plot = FALSE, add = TRUE)
source("misc.R")
loadModel("model/Gosselin2024_Ecoli_ace_bioproduction.cps")
#   number of steps
n_step <- 50
#   acetate concentration (between 0.1 and 100 mM)
ace_concentration <- 10**seq(-1, 2, length.out = n_step)
#   glycolytic activity (between 20 and 100 % of initial Vmax)
glc_vmax <- getParameters(key="(glc_upt).V")$value*seq(0.2*n_step, n_step)/n_step
# create empty matrix to store simulation results
fluxes <- c("Values[v_growth_rate]", "Values[v_glc_uptake]", "Values[v_ace_net]", "Values[v_bioproduction]")
simulation_results <- array(NA, dim=c(n_step*0.8+1, n_step, length(fluxes)+1), dimnames=list(inhibition=NULL, ace_concentration=NULL, specie=c("ace_concentration", fluxes)))
# run simulations
# for each glycolytic activity
for (k in seq(n_step*0.8+1)){
# create empty matrix to store simulation results for a given glycolytic activity (k)
res_ace_range <- matrix(NA, nrow=n_step, ncol=length(fluxes)+1, dimnames=list(r=NULL, c=c("ace_concentration", fluxes)))
# update Vmax_glycolysis
setParameters(key="(glc_upt).V", value = glc_vmax[k])
applyInitialState()
# for each acetate concentration
for (j in seq(n_step)){
# update acetate concentration
setSpecies(key="Ace_out", initial_concentration=ace_concentration[j])
applyInitialState()
# calculate steady-state fluxes
res_ss <- runSteadyState()
# save steady-state fluxes for glycolytic activity k & acetate concentration j
res_ace_range[j,] <- c(ace_concentration[j], unlist(res_ss$global_quantities[res_ss$global_quantities$key %in% fluxes, "value"]))
}
# save steady-state fluxes for all acetate concentrations at glycolytic activity k
simulation_results[k,,] <- res_ace_range
}
data_to_save <- simulation_results[,,"Values[v_glc_uptake]"]
colnames(data_to_save) <- ace_concentration
rownames(data_to_save) <- glc_vmax*0.00177
write.csv(data_to_save, "results/SourceData/Figure 1/1B/data_1B.csv", quote=FALSE)
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results[,,3]), nlevels = 10,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2)})
data_to_save <- simulation_results[,,"Values[v_ace_net]"]
colnames(data_to_save) <- ace_concentration
rownames(data_to_save) <- glc_vmax*0.00177
write.csv(data_to_save, "results/SourceData/Figure 1/1C/data_1C.csv", quote=FALSE)
cols = colorRampPalette(c('royalblue4','lightblue'))
color.palette = function(n) hcl.colors(n, "YlOrRd", rev = TRUE)
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results[,,4]), nlevels = 10,
col = c(cols(6), color.palette(4)),
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2)})
data_to_save <- simulation_results[,,"Values[v_growth_rate]"]
colnames(data_to_save) <- ace_concentration
rownames(data_to_save) <- glc_vmax*0.00177
write.csv(data_to_save, "results/SourceData/Figure 1/1D/data_1D.csv", quote=FALSE)
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results[,,2]), nlevels = 10,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2)})
data_to_save <- simulation_results[,,"Values[v_bioproduction]"]
colnames(data_to_save) <- ace_concentration
rownames(data_to_save) <- glc_vmax*0.00177
write.csv(data_to_save, "results/SourceData/Figure 1/1C/data_1D.csv", quote=FALSE)
cols = colorRampPalette(c('royalblue4','lightblue'))
color.palette = function(n) hcl.colors(n, "YlOrRd", rev = TRUE)
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results[,,5]), nlevels = 10,
col = color.palette(12),
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2)})
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 10,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2)}) #; contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 10, add = TRUE, lwd = 2)})
contour(t(simulation_results_dyn[,,2]), levels = 1, drawlabels = FALSE, axes = FALSE, frame.plot = FALSE, add = TRUE)
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 10,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2)}) #; contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 10, add = TRUE, lwd = 2)})
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 20,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2); contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 20, add = TRUE, lwd = 2)})
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 20,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2); contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 20, add = TRUE, lwd = 1)})
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 10,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2); contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 20, add = TRUE, lwd = 1)})
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 12,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2); contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 20, add = TRUE, lwd = 1)})
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 8,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2); contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 20, add = TRUE, lwd = 1)})
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 15,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2); contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 20, add = TRUE, lwd = 1)})
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 20,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2); contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 20, add = TRUE, lwd = 1)})
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 10,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2); contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 20, add = TRUE, lwd = 1)})
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 9,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2); contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 20, add = TRUE, lwd = 1)})
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 8,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2); contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 20, add = TRUE, lwd = 1)})
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 7,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2); contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 20, add = TRUE, lwd = 1)})
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 6,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2); contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 20, add = TRUE, lwd = 1)})
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 11,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2); contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 20, add = TRUE, lwd = 1)})
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 12,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2); contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 20, add = TRUE, lwd = 1)})
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 13,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2); contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 20, add = TRUE, lwd = 1)})
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 14,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2); contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 20, add = TRUE, lwd = 1)})
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 15,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2); contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 20, add = TRUE, lwd = 1)})
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 1,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2); contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 20, add = TRUE, lwd = 1)})
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 16,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2); contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 20, add = TRUE, lwd = 1)})
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 17,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2); contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 20, add = TRUE, lwd = 1)})
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 18,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2); contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 20, add = TRUE, lwd = 1)})
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 20,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2); contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 20, add = TRUE, lwd = 1)})
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results[,,3]), nlevels = 10,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2);
axis(2); contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 20, add = TRUE, lwd = 1)})
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results[,,3]), nlevels = 10,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2);
axis(2); contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results[,,3]), nlevels = 10, add = TRUE, lwd = 1)})
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results[,,3]), nlevels = 10,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2);
axis(2); contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results[,,3]), labels=FALSE, nlevels = 10, add = TRUE, lwd = 1)})
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results[,,3]), nlevels = 10,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2);
axis(2); contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results[,,3]), labels=NA, nlevels = 10, add = TRUE, lwd = 1)})
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results[,,3]), nlevels = 10,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2);
axis(2); contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results[,,3]), drawlabels=FALSE, nlevels = 10, add = TRUE, lwd = 1)})
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 20,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2); contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results_dyn[,,2]), nlevels = 20, drawlabels=FALSE, add = TRUE, lwd = 1)})
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results[,,3]), nlevels = 10,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2); contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results[,,3]), drawlabels=FALSE, nlevels = 10, add = TRUE, lwd = 1)})
cols = colorRampPalette(c('royalblue4','lightblue'))
color.palette = function(n) hcl.colors(n, "YlOrRd", rev = TRUE)
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results[,,4]), nlevels = 10,
col = c(cols(6), color.palette(4)),
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2); contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results[,,3]), drawlabels=FALSE, nlevels = 10, add = TRUE, lwd = 1)})
cols = colorRampPalette(c('royalblue4','lightblue'))
color.palette = function(n) hcl.colors(n, "YlOrRd", rev = TRUE)
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results[,,4]), nlevels = 10,
col = c(cols(6), color.palette(4)),
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2); contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results[,,4]), drawlabels=FALSE, nlevels = 10, add = TRUE, lwd = 1)})
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results[,,2]), nlevels = 10,
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2); contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results[,,2]), drawlabels=FALSE, nlevels = 10, add = TRUE, lwd = 1)})
cols = colorRampPalette(c('royalblue4','lightblue'))
color.palette = function(n) hcl.colors(n, "YlOrRd", rev = TRUE)
filled.contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results[,,5]), nlevels = 10,
col = color.palette(12),
plot.axes = { axis(1, at=c(-1, 0, 1, 2), label=c(0.1, 1, 10, 100));
axis(2); contour(x=log10(ace_concentration), y=(glc_vmax/max(glc_vmax))*100, z = t(simulation_results[,,5]), drawlabels=FALSE, nlevels = 10, add = TRUE, lwd = 1)})
knitr::opts_chunk$set(echo = TRUE)
installed.packages("knitr")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.width=7,
fig.height=5
)
knitr::opts_chunk$set(echo = TRUE)
install.packages("knitr")
```{r setup, include=FALSE}
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.width=7,
fig.height=5
)
library(dynafluxr)
remotes::install_github("mathscell/bspline")
